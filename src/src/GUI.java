
package src;

/**
 *
 * @author muradakhn@gmail.com
 * @version 1.5
 */
import javax.swing.DefaultListModel;

public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    private final Enigma enigma = new Enigma();
    private static final String  alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    

    public GUI() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        ClearB = new javax.swing.JButton();
        EnterB = new javax.swing.JButton();
        Spinner2 = new javax.swing.JSpinner();
        Spinner3 = new javax.swing.JSpinner();
        Spinner1 = new javax.swing.JSpinner();
        Rotor2 = new javax.swing.JComboBox<>();
        Rotor1 = new javax.swing.JComboBox<>();
        Reflector = new javax.swing.JComboBox<>();
        Rotor3 = new javax.swing.JComboBox<>();
        Disconnect = new javax.swing.JButton();
        Connect = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputText = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        inputText = new javax.swing.JTextArea();
        Reset = new javax.swing.JButton();
        Spinner5 = new javax.swing.JSpinner();
        Spinner6 = new javax.swing.JSpinner();
        jScrollPane2 = new javax.swing.JScrollPane();
        Plugboard = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1225, 980));
        getContentPane().setLayout(null);

        ClearB.setText("Clear");
        ClearB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearBActionPerformed(evt);
            }
        });
        getContentPane().add(ClearB);
        ClearB.setBounds(400, 750, 111, 35);

        EnterB.setText("Enter");
        EnterB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnterBActionPerformed(evt);
            }
        });
        getContentPane().add(EnterB);
        EnterB.setBounds(400, 700, 111, 35);

        Spinner2.setModel(new javax.swing.SpinnerListModel(new String[] {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"}));
        getContentPane().add(Spinner2);
        Spinner2.setBounds(560, 350, 80, 80);

        Spinner3.setModel(new javax.swing.SpinnerListModel(new String[] {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"}));
        getContentPane().add(Spinner3);
        Spinner3.setBounds(310, 350, 80, 80);

        Spinner1.setModel(new javax.swing.SpinnerListModel(new String[] {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"}));
        getContentPane().add(Spinner1);
        Spinner1.setBounds(790, 350, 80, 80);

        Rotor2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "I", "II", "III", "IV", "V" }));
        Rotor2.setSelectedIndex(1);
        Rotor2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Rotor2ActionPerformed(evt);
            }
        });
        getContentPane().add(Rotor2);
        Rotor2.setBounds(570, 260, 60, 32);

        Rotor1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "I", "II", "III", "IV", "V" }));
        Rotor1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Rotor1ActionPerformed(evt);
            }
        });
        getContentPane().add(Rotor1);
        Rotor1.setBounds(800, 260, 60, 32);

        Reflector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A", "B", "C" }));
        Reflector.setSelectedIndex(1);
        Reflector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReflectorActionPerformed(evt);
            }
        });
        getContentPane().add(Reflector);
        Reflector.setBounds(61, 312, 100, 50);

        Rotor3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "I", "II", "III", "IV", "V" }));
        Rotor3.setSelectedIndex(2);
        Rotor3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Rotor3ActionPerformed(evt);
            }
        });
        getContentPane().add(Rotor3);
        Rotor3.setBounds(320, 260, 60, 32);

        Disconnect.setText("Disconnect Selected");
        Disconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisconnectActionPerformed(evt);
            }
        });
        getContentPane().add(Disconnect);
        Disconnect.setBounds(980, 740, 190, 35);

        Connect.setText("Connect");
        Connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectActionPerformed(evt);
            }
        });
        getContentPane().add(Connect);
        Connect.setBounds(1100, 190, 80, 35);

        outputText.setEditable(false);
        outputText.setColumns(20);
        outputText.setRows(13);
        jScrollPane1.setViewportView(outputText);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(540, 600, 300, 210);

        inputText.setColumns(20);
        inputText.setRows(13);
        jScrollPane4.setViewportView(inputText);

        getContentPane().add(jScrollPane4);
        jScrollPane4.setBounds(70, 600, 300, 210);

        Reset.setText("Reset Positions");
        Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetActionPerformed(evt);
            }
        });
        getContentPane().add(Reset);
        Reset.setBounds(560, 110, 190, 35);

        Spinner5.setModel(new javax.swing.SpinnerListModel(new String[] {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"}));
        getContentPane().add(Spinner5);
        Spinner5.setBounds(960, 190, 50, 40);

        Spinner6.setModel(new javax.swing.SpinnerListModel(new String[] {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"}));
        getContentPane().add(Spinner6);
        Spinner6.setBounds(1030, 190, 50, 40);

        jScrollPane2.setViewportView(Plugboard);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(980, 290, 190, 430);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("Background.png"))); // NOI18N
        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, -10, 1200, 900);
        jLabel1.getAccessibleContext().setAccessibleName("Background");
        jLabel1.getAccessibleContext().setAccessibleDescription("Background");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ClearBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearBActionPerformed
        inputText.setText("");
        outputText.setText("");
    }//GEN-LAST:event_ClearBActionPerformed
       
    /**Runs the src
     * @param evt button is pressed
     *Takes values from the selections on rotor setup in the GUI and send it in the rotor class
     *runs the src
     *makes sure that all characters are appropriate 
     *displays a warning message if input is wrong
     *displays the coded/decoded input in the output box if everything is ok
     * 
     */
    private void EnterBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnterBActionPerformed
               
        try {
            int r3 = Rotor3.getSelectedIndex();
            enigma.selectRt(2, r3);
            int r2 = Rotor2.getSelectedIndex();
            enigma.selectRt(1, r2);
            int r1 = Rotor1.getSelectedIndex();
            enigma.selectRt(0, r1);

            enigma.selectRf(Reflector.getSelectedIndex());

            enigma.setRt(0, alphabet.indexOf(Spinner1.getValue().toString()));
            enigma.setRt(1, alphabet.indexOf(Spinner2.getValue().toString()));
            enigma.setRt(2, alphabet.indexOf(Spinner3.getValue().toString()));

            String output;
            output = "";
            String[] lines = inputText.getText().split("\\n");

            for (String line : lines) {
                String input = line;
                input = input.toUpperCase();
                for (int i = 0; i < input.length(); i++) {
                    output = output + enigma.run(input.charAt(i));
                }
                output = output + "\n";
            }

            int[] positions = enigma.getPositions();

            Spinner1.setValue(String.valueOf(alphabet.charAt(positions[0])));
            Spinner2.setValue(String.valueOf(alphabet.charAt(positions[1])));
            Spinner3.setValue(String.valueOf(alphabet.charAt(positions[2])));

            outputText.setText(output);

        } catch (Exception e) {
            ResetActionPerformed(evt);
            outputText.setText("src has crashed. \n\nERROR: Please make sure there are no \ncharacters other than letters in the input box \n\nWARNING: rotor positions have been reset");
        }


    }//GEN-LAST:event_EnterBActionPerformed

    private void Rotor3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Rotor3ActionPerformed

    }//GEN-LAST:event_Rotor3ActionPerformed

    private void Rotor2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Rotor2ActionPerformed

    }//GEN-LAST:event_Rotor2ActionPerformed

    private void Rotor1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Rotor1ActionPerformed

    }//GEN-LAST:event_Rotor1ActionPerformed

    private void ReflectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReflectorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ReflectorActionPerformed
    /**
     * 
     * @param evt disconnect button is pressed
     * disconnects selected letters in the plugboard object
     */
    private void DisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisconnectActionPerformed
        
        DefaultListModel dlm  = new DefaultListModel();
        enigma.disconnectPB(Plugboard.getSelectedValue().charAt(1));
        char[] conns = enigma.getConns();
        
        for (int i = 0; i < conns.length; i++) {
            if(conns[i]!= alphabet.charAt(i) && i < alphabet.indexOf(conns[i])){            
                dlm.addElement( " " +alphabet.charAt(i) + " to " + conns[i] + "               /               " + conns[i] + " to " + alphabet.charAt(i) + " ");
            }
        }
        Plugboard.setModel(dlm);
    }//GEN-LAST:event_DisconnectActionPerformed
    /**
     * Resets rotor positions
     * @param evt reset button is pressed
     * rets positions to0 in the rotor class
     * 
     */
    private void ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetActionPerformed
        enigma.resetRt();
        int[] positions = enigma.getPositions();

        Spinner1.setValue(String.valueOf(alphabet.charAt(positions[0])));
        Spinner2.setValue(String.valueOf(alphabet.charAt(positions[1])));
        Spinner3.setValue(String.valueOf(alphabet.charAt(positions[2])));
    }//GEN-LAST:event_ResetActionPerformed
/**
 * 
 * @param evt connect is pressed
 * connects 2 selected letetrs in the plugboard object
 */
    private void ConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectActionPerformed
        DefaultListModel dlm  = new DefaultListModel();
        enigma.connectPB(Spinner5.getValue().toString().charAt(0), Spinner6.getValue().toString().charAt(0));
        char[] conns = enigma.getConns();
        
        for (int i = 0; i < conns.length; i++) {
            if(conns[i]!= alphabet.charAt(i) && i < alphabet.indexOf(conns[i])){            
                dlm.addElement( " " +alphabet.charAt(i) + " to " + conns[i] + "               /               " + conns[i] + " to " + alphabet.charAt(i) + " ");
            }
        }
        Plugboard.setModel(dlm);
    }//GEN-LAST:event_ConnectActionPerformed

    /**Runs the program
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ClearB;
    private javax.swing.JButton Connect;
    private javax.swing.JButton Disconnect;
    private javax.swing.JButton EnterB;
    private javax.swing.JList<String> Plugboard;
    private javax.swing.JComboBox<String> Reflector;
    private javax.swing.JButton Reset;
    private javax.swing.JComboBox<String> Rotor1;
    private javax.swing.JComboBox<String> Rotor2;
    private javax.swing.JComboBox<String> Rotor3;
    private javax.swing.JSpinner Spinner1;
    private javax.swing.JSpinner Spinner2;
    private javax.swing.JSpinner Spinner3;
    private javax.swing.JSpinner Spinner5;
    private javax.swing.JSpinner Spinner6;
    private javax.swing.JTextArea inputText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea outputText;
    // End of variables declaration//GEN-END:variables
}
